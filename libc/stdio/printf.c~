#include <stdbool.h>
#include <stdarg.h>
#include <stdio.h>
#include <string.h>
//#include <limits.h>

static void print(const char* data, size_t data_length)
{
	for ( size_t i = 0; i < data_length; i++ )
		putchar((int) ((const unsigned char*) data)[i]);
}
int printf(const char* restrict format, ...)
{
	va_list parameters;
	va_start(parameters, format);

	int written = 0;
	size_t amount;
	bool rejected_bad_specifier = false;

	while ( *format != '\0' )
	{
		if ( *format != '%' )
		{
		print_c:
			amount = 1;
			while ( format[amount] && format[amount] != '%' )
				amount++;
			print(format, amount);
			format += amount;
			written += amount;
			continue;
		}

		const char* format_begun_at = format;

		if ( *(++format) == '%' )
			goto print_c;

		if ( rejected_bad_specifier )
		{
		incomprehensible_conversion:
			rejected_bad_specifier = true;
			format = format_begun_at;
			goto print_c;
		}

		if ( *format == 'c' )
		{
			format++;
			char c = (char) va_arg(parameters, int /* char promotes to int */);
			print(&c, sizeof(c));
		}
		else if ( *format == 's' )
		{
			format++;
			const char* s = va_arg(parameters, const char*);
			print(s, strlen(s));
		}
		else if ( *format == 'i' )
                {
			format++;
			char s[11];
			int n = va_arg(parameters, int);
			{
				//https://en.wikibooks.org/wiki/C_Programming/C_Reference/stdlib.h/itoa
				int i, sign;

				if ((sign = n) < 0)  /* record sign */
				 n = -n;          /* make n positive */
				i = 0;
				do {       /* generate digits in reverse order */
				 s[i++] = n % 10 + '0';   /* get next digit */
				} while ((n /= 10) > 0);     /* delete it */
				if (sign < 0)
				 s[i++] = '-';
				s[i] = '\0';
				reverse(s);
			}
			print(s,11);
                }
		else if ( *format == 'x' )
                {
			format++;
			char s[9] = {0,0,0,0,0,0,0,0,0};
			char v[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
			int n = va_arg(parameters, int);
			{
				//https://en.wikibooks.org/wiki/C_Programming/C_Reference/stdlib.h/itoa
				int i, sign;

				if ((sign = n) < 0)  /* record sign */
				 n = -n;          /* make n positive */
				i = 0;
				do {       /* generate digits in reverse order */
				 s[i++] = v[n % 16];   /* get next digit */
				} while ((n /= 16) > 0);     /* delete it */
				if (sign < 0)
				 s[i++] = '-';
				s[i] = '\0';
				reverse(s);
			}
			print(s,strlen(s));
                }
		else
		{
			goto incomprehensible_conversion;
		}
	}

	va_end(parameters);

	return written;
}
